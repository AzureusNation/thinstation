#!/bin/bash

mounted()
{
        if [ "`cat /proc/mounts |grep -e $1 -c`" -ne "0" ]; then
                return 0
        else
                return 1
        fi
}

do_unmounts()
{
        for mount in dev/pts dev tmp proc sys ; do
                while mounted /thinstation/$mount ; do
                        umount /thinstation/$mount
                done
        done
}

x_echo()
{
        Xdialog --title "$1" --msgbox "$2" 0 0 2> /dev/null
}

do_update()
{
	$XTERM_CMD -T "Update initrd" $ARG update-initrd -w
	case $? in
		0) x_echo Update "Update Complete" ;;
		1) x_echo Update "No Update Needed" ;;
		2) x_echo Update "Error! Could not check md5" ;;
		3) x_echo Update "Error! No initrd or vmlinuz found" ;;
	esac
}

toggle_smp()
{
	if [ ! -e /thinstation/build/SMP ]; then
		touch /thinstation/build/SMP
		x_echo "Toggle SMP" "SMP kernel enabled for Builds"
	else
		rm /thinstation/build/SMP
		x_echo "Toggle SMP" "SMP disabled - UP kernel will be used for Builds"
	fi
}

toggle_allmodules()
{
        if [ ! -e /thinstation/build/ALLMODULES ]; then
                touch /thinstation/build/ALLMODULES
                x_echo "Toggle ALLMODULES" "Enabled allmodules for Builds"
        else
                rm /thinstation/build/ALLMODULES
                x_echo "Toggle ALLMODULES" "Disabled allmodules - machine profiles will be used for Builds"
        fi
}

toggle_pxe()
{
	if [ -n "`find /thinstation/build/boot-images/ -type d -perm -o=w -name pxe`" ] ; then
		chmod 755 /thinstation/build/boot-images/pxe
		x_echo "Toggle PXE Read/Write" "PXE Server Write Disabled"
	else
		chmod 777 /thinstation/build/boot-images/pxe
		x_echo "Toggle PXE Read/Write" "PXE Server Write Enabled"
	fi
}

do_build()
{
	cd /thinstation
	$XTERM_CMD -T Build $ARG ./setup-chroot -b -o --autodl --license ACCEPT 
}

make_machine()
{
	if [ -e /thinstation/build/boot-images/pxe/module.list ] ; then
		DIALOG_RESPONSE=`Xdialog --stdout --title "Machine Name" --left --inputbox "What is the model of the machine" 15 55 "Dell-FX170" ` 2>>/dev/null
		if [ "$?" == "0" ] && [ ! -z "$DIALOG_RESPONSE" ] ; then
			cd /thinstation/build
			./mkmachine $DIALOG_RESPONSE
		fi
	else
		x_echo "No Source Files" "Please run hwlister.sh on the target machine first"
	fi
}

do_config()
{
	medit --use-session=no -t /thinstation/build/build.conf /thinstation/build/thinstation.conf.buildtime /thinstation/build/thinstation.conf.sample
}

do_term()
{
	xfce4-terminal --working-directory=/thinstation -x ./setup-chroot
}

do_reset()
{
	Xdialog --title "Warning: Factory Reset" --default-no --yesno "\
This will wipe out your build env and pull updates from git. \n\
If you have any customizations, they will be lost. You should \n\
consider backing them up before proceding. \n\
\n\
Are you really sure?" 20 100
        retval=$?
        if [ "$retval" -gt "0" ]; then exit $retval ; fi
	cd /thinstation
	while pidof setup-chroot > /dev/null; do
		kill -HUP `pidof setup-chroot`
		sleep .1
	done
	do_unmounts
	$XTERM_CMD -T "Wipe" $ARG rm -rf *
	$XTERM_CMD -T "GIT Pull" $ARG git pull
	$XTERM_CMD -T "GIT Checkout" $ARG git checkout -f
	$XTERM_CMD -T "Setup" $ARG ./setup-chroot -i -a
	x_echo "Done" "You build env has been reset and updated"
}

terminal_arg()
{
	if [ "`basename $XTERM_CMD`" == "xfce4-terminal" ]; then
		ARG="--disable-server -x"
	else
		ARG="-e"
	fi
}

other_branches()
{
        wget --no-check-certificate https://github.com/Thinstation/thinstation/branches -O /tmp/branches
        for tag in `grep /tmp/branches -e tree |cut -d '"' -f2`; do
                basename $tag
        done
}

check_installed()
{
	if ! mounted /thinstation; then
		x_echo "Not Intalled" "DevStation is not installed, you will need to install it before you can do builds."
		exit 2
	fi
}

check_git()
{
	if mounted /thinstation && [ ! -e /thinstation/.git ]; then
		Xdialog --stdout \
			--title "No Build Environment!" \
			--yesno "Build Environment is not cloned. Would you like to clone it now?" \
			0 0
		if [ "$?" == "0" ]; then
			unset list
			index=0
			for branch in `other_branches` 'master(Unstable)'; do
			        brnch[$index]=$branch
			        list="$list $index $branch"
		        	let index=index+1
			done

			index=`Xdialog  --title "Git Branch" \
                			--no-label \
		                	--no-tags \
	                		--stdout \
			                --menu "Which branch would you like to checkout?" 20 50 4 $list`
			if [ "$?" == "0" ]; then
	                	branch=${brnch[$index]}
				if [ "$branch" == 'master(Unstable)' ]; then
					branch=master
				fi
        		else
                		exit $?
        		fi
			git clone --depth 1 -b $branch https://github.com/Thinstation/thinstation.git /thinstation
		else
			exit 3
		fi
	fi
}

check_unwind()
{
	if [ -e /thinstation/ts/5.1/build ] && [ ! -e /thinstation/build/build ]; then
		Xdialog --stdout \
                        --title "Unwind" \
                        --yesno "Build Environment is not ready. Would you like to unwind it now?" \
                        0 0
                if [ "$?" == "0" ]; then
			cd /thinstation
			./setup-chroot -i
		else
			exit 4
		fi
	fi
}

store_list()
{
	remotes=`git branch -a |grep -e remotes |cut -d "/" -f2 |uniq`
	stores="local $remotes"
	echo "$stores"
}

branch_list()
{
	if [ "$str" == "local" ]; then
		branches=`git branch |cut -c 3-`
	else
		branches=`git ls-remote --heads origin |cut -d "/" -f3`
	fi
	echo "$branches"
}

select_store()
{
	unset list
	index=0
	for str in `store_list`; do
		store[$index]=$str
		list="$list $index ${store[$index]}"
		let index=index+1
	done
	if [ "$index" -gt "1" ]; then
		index=`Xdialog  --title "Git Store" \
				--no-label \
				--no-tags \
				--stdout \
				--menu "Which Git Store?" 20 50 4 $list`
		if [ "$?" != "0" ]; then
			exit 3
		fi
	else
		index=0
	fi
	str=${store[$index]}
}

select_branch()
{
	unset list
	index=0
	for brnch in `branch_list`; do
        	branch[$index]=$brnch
	        list="$list $index ${branch[$index]}"
        	let index=index+1
	done
	if [ "$index" -gt "1" ]; then
        	index=`Xdialog  --title "Git Branch" \
                	        --no-label \
                        	--no-tags \
	                        --stdout \
        	                --menu "Which Git Branch?" 20 50 4 $list`
	        if [ "$?" != "0" ]; then
        	        exit 4
	        fi
	else
		index=0
	fi
	brnch=${branch[$index]}
}

confirm_dialog()
{
	Xdialog	--stdout \
		--title "Warning: Branch Select" \
		--default-no \
		--yesno "\
This will wipe out your build env and checkout the selected \n\
branch from git. If you have any customizations, they will be \n\
lost. You should consider backing them up before proceding. \n\
\n\
Are you really sure?" 20 100
}

fetch_branch()
{
	$XTERM_CMD -T "Wipe" $ARG rm -rf *
	if [ "$str" != "local" ]; then
		if [ ! -e ./git/refs/heads/$brnch ]; then
			$XTERM_CMD -T "GIT Fetch" $ARG git fetch --depth 1 $str "+$brnch:$brnch"
		else
			$XTERM_CMD -T "GIT Fetch" $ARG git fetch $str $brnch
		fi
	fi
}

checkout_branch()
{
	$XTERM_CMD -T "GIT Checkout" $ARG git checkout -f $brnch
}

sbranch()
{
	cd /thinstation
	select_store
	select_branch
	if confirm_dialog; then
		fetch_branch
		checkout_branch
	else
		exit 2
	fi
}

terminal_arg
check_installed
check_git
check_unwind

case $1 in
	toggle-smp)
		toggle_smp
		;;
	toggle-modules)
		toggle_allmodules
		;;
	toggle-pxe)
		toggle_pxe
		;;
	make-machine)
		make_machine
		;;
	build)
		do_build
		;;
	configure)
		do_config
		;;
	reset)
		do_reset
		;;
	sbranch)
		do_branch
		;;
	update)
		do_update
		;;
	terminal)
		do_term
		;;
esac
exit 0
