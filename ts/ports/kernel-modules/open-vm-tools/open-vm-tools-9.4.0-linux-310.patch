--- a/modules/linux/vmhgfs/file.c	2013-07-30 23:47:58.000000000 +0200
+++ b/modules/linux/vmhgfs/file.c	2013-07-30 23:52:42.000000000 +0200
@@ -25,6 +25,9 @@
 /* Must come before any kernel header file. */
 #include "driver-config.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0)
+#include <linux/aio.h>
+#endif
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/signal.h>
--- a/modules/linux/vmsync/sync.c	2014-06-04 13:31:58.810896688 +0000
+++ b/modules/linux/vmsync/sync.c	2014-06-04 15:02:14.012218065 +0000
@@ -162,7 +162,7 @@
    cancel_delayed_work(&state->thawTask);
    list_for_each_safe(cur, tmp, &state->devices) {
       dev = list_entry(cur, VmSyncBlockDevice, list);
-      if (dev->sb != NULL && dev->sb->s_frozen != SB_UNFROZEN) {
+      if (dev->sb != NULL && dev->sb->s_writers.frozen != SB_UNFROZEN) {
          thaw_bdev(dev->bdev, dev->sb);
          atomic_dec(&gFreezeCount);
       }
@@ -237,7 +237,7 @@
     * the superblock is already frozen.
     */
    if (inode->i_sb->s_bdev == NULL ||
-       inode->i_sb->s_frozen != SB_UNFROZEN) {
+       inode->i_sb->s_writers.frozen != SB_UNFROZEN) {
       result = (inode->i_sb->s_bdev == NULL) ? -EINVAL : -EALREADY;
       compat_path_release(&nd);
       goto exit;
@@ -303,8 +303,8 @@
                     const char __user *userPaths)  // IN
 {
    int result = 0;
-   char *paths;
-   char *currPath;
+   struct filename *paths;
+   const char *currPath;
    char *nextSep;
    struct list_head *cur, *tmp;
    struct list_head pathList;
@@ -328,7 +328,7 @@
    /*
     * First, try to add all paths to the list of paths to be frozen.
     */
-   currPath = paths;
+   currPath = paths->name;
    do {
       nextSep = strchr(currPath, ':');
       if (nextSep != NULL) {
@@ -371,6 +371,8 @@
    compat_mutex_unlock(&state->lock);
    compat_mutex_unlock(&gFreezeLock);
 
+   putname(paths);
+
    if (result == 0) {
       compat_schedule_delayed_work(&state->thawTask, VMSYNC_THAW_TASK_DELAY);
    }
@@ -670,9 +672,9 @@
    }
 
    /* Create /proc/driver/vmware-sync */
-   controlProcEntry = create_proc_entry("driver/vmware-sync",
+   controlProcEntry = proc_create("driver/vmware-sync",
                                         S_IFREG | S_IRUSR | S_IRGRP | S_IROTH,
-                                        NULL);
+                                        NULL, &VmSyncFileOps);
    if (!controlProcEntry) {
       printk(KERN_ERR "vmsync: could not create /proc/driver/vmware-sync\n");
       kmem_cache_destroy(gSyncStateCache);
@@ -680,7 +682,6 @@
       return -EINVAL;
    }
 
-   controlProcEntry->proc_fops = &VmSyncFileOps;
    return 0;
 }
 
--- a/modules/linux/vmblock/linux/control.c	2014-06-04 14:35:37.391612184 +0000
+++ b/modules/linux/vmblock/linux/control.c	2014-06-04 15:03:39.511490627 +0000
@@ -208,9 +208,9 @@
    VMBlockSetProcEntryOwner(controlProcMountpoint);
 
    /* Create /proc/fs/vmblock/dev */
-   controlProcEntry = create_proc_entry(VMBLOCK_CONTROL_DEVNAME,
+   controlProcEntry = proc_create(VMBLOCK_CONTROL_DEVNAME,
                                         VMBLOCK_CONTROL_MODE,
-                                        controlProcDirEntry);
+                                        controlProcDirEntry, &ControlFileOps);
    if (!controlProcEntry) {
       Warning("SetupProcDevice: could not create " VMBLOCK_DEVICE "\n");
       remove_proc_entry(VMBLOCK_CONTROL_MOUNTPOINT, controlProcDirEntry);
@@ -218,7 +218,6 @@
       return -EINVAL;
    }
 
-   controlProcEntry->proc_fops = &ControlFileOps;
    return 0;
 }
 
@@ -278,14 +277,16 @@
                int (*blockOp)(const char *filename,   // IN: block operation
                               const os_blocker_id_t blocker))
 {
-   char *name;
+   struct filename *filename;
+   char *name = NULL;
    int i;
    int retval;
 
-   name = getname(buf);
-   if (IS_ERR(name)) {
-      return PTR_ERR(name);
+   filename = getname(buf);
+   if (IS_ERR(filename)) {
+      return PTR_ERR(filename);
    }
+   name=filename->name;
 
    for (i = strlen(name) - 1; i >= 0 && name[i] == '/'; i--) {
       name[i] = '\0';
